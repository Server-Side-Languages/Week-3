{
	"info": {
		"_postman_id": "5a2ad84d-db50-452d-83f2-c35bffe6e070",
		"name": "Games",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34747704"
	},
	"item": [
		{
			"name": "Creator",
			"item": [
				{
					"name": "All Developers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is within acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Success is true\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.success).to.be.true;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/developers?sort=-age",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"developers"
							],
							"query": [
								{
									"key": "sort",
									"value": "-age"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Developers with Range Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is within acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Success is true\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.success).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"It returns based on filter\", function(){",
									"    const [developerObject] = pm.response.json().data;",
									"    pm.expect(developerObject).to.have.property(\"_id\");",
									"    pm.expect(developerObject).to.have.property(\"name\");",
									"    pm.expect(developerObject).to.have.property(\"age\");",
									"    pm.expect(developerObject).to.have.property(\"description\");",
									"    pm.expect(developerObject).to.have.property(\"company\");",
									"    pm.expect(developerObject.name).to.eql(\"Corey Davis\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/developers?age[gt]=30&age[lt]=45",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"developers"
							],
							"query": [
								{
									"key": "age[gt]",
									"value": "30"
								},
								{
									"key": "age[lt]",
									"value": "45"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Developers Pagination Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Pagination test\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Check if pagination metadata exists in the response",
									"    if (!responseData.hasOwnProperty('currentPage')) {",
									"        pm.expect(responseData).to.not.have.property('currentPage');",
									"        pm.expect(responseData).to.not.have.property('totalCount');",
									"        pm.expect(responseData).to.not.have.property('limit');",
									"        pm.expect(responseData).to.not.have.property('totalPages');",
									"        return;",
									"    }",
									"",
									"    // Proceed with the rest of the test if pagination metadata is present",
									"    const totalPages = Math.ceil(responseData.totalCount / responseData.limit);",
									"    // Add the rest of your assertions here",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/developers?age[gt]=30&age[lt]=45",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"developers"
							],
							"query": [
								{
									"key": "age[gt]",
									"value": "30"
								},
								{
									"key": "age[lt]",
									"value": "45"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Developers sorted test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sort in ascending order\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true; // Check if request was successful",
									"    pm.expect(response.data).to.be.an('array'); // Check if data is an array",
									"    if (response.data.length > 1) {",
									"        // Check if data is sorted in ascending order based on the first field (assumption)",
									"        for (let i = 1; i < response.data.length; i++) {",
									"            pm.expect(response.data[i - 1].fieldToSort).to.be.at.most(response.data[i].fieldToSort);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/developers?sort=name",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"developers"
							],
							"query": [
								{
									"key": "sort",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Developers by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Presence of specific header Content-Type in the response\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/developers/664adbea7bae56b3bc3708b9",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"developers",
								"664adbea7bae56b3bc3708b9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Developer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to ensure the response status code is within the success range (200-299)",
									"pm.test(\"Response status code indicates success\", function () {",
									"    pm.expect(pm.response.code).to.be.within(200, 299);",
									"});",
									"",
									"// Test to ensure the Content-Type header is set to 'application/json'",
									"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test to ensure the response is a valid JSON format",
									"pm.test(\"Response body is a valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"developer\":{\n    \"name\":\"Casey Yano\",\n    \"age\":0,\n    \"description\": \"Casey Yano is one of the designers for Mega Crit and was also one of the founders.\",\n    \"company\":\"Mega Crit\"\n}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/developers",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"developers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Developer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to ensure the response time is less than 300ms",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"// Validate the response schema for the developer object",
									"pm.test(\"Validate the response schema for the developer object\", function () {",
									"    // Validate the structure of the response data",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object').and.to.not.be.empty;",
									"    pm.expect(responseData.data).to.be.an('object').and.to.not.be.empty; // Assuming _id is nested under 'data'",
									"    pm.expect(responseData.data._id).to.exist; // Validate the presence of _id",
									"    pm.expect(responseData.data.name).to.exist;",
									"    pm.expect(responseData.data.age).to.exist;",
									"    pm.expect(responseData.data.company).to.exist;",
									"    pm.expect(responseData.data.description).to.exist;",
									"    pm.expect(responseData.data.__v).to.exist.and.to.be.a('number');",
									"});",
									"",
									"// Test for the response status code (optional, adjust as needed)",
									"// If the endpoint is expected to return a 200 status code, include this test",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"age\":40\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/developers/665354f39e50de2dd134f097",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"developers",
								"665354f39e50de2dd134f097"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Developer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed syntax error in the test for sensitive information",
									"pm.test(\"Response does not contain sensitive information about the deleted developer\", function () {",
									"    const responseData = pm.response.text();",
									"    ",
									"    pm.expect(responseData).to.not.include('password');",
									"    pm.expect(responseData).to.not.include('socialSecurityNumber');",
									"    pm.expect(responseData).to.not.include('creditCardNumber');",
									"    // Verifying absence of sensitive information in the response",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/developers/66529b5e00eaaf516dd85d24",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"developers",
								"66529b5e00eaaf516dd85d24"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Name of Game",
			"item": [
				{
					"name": "All Games",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to ensure the response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test to ensure the response time is within the acceptable range (300ms)",
									"pm.test(\"Response time is within the acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"// Test to ensure the response body contains an object with a 'data' property",
									"pm.test(\"Response body contains 'data' object\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.not.be.empty;",
									"});",
									"",
									"// Test to ensure each game object in the response data has a 'genre' array",
									"pm.test(\"Each game object contains a 'genre' array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data).to.be.an('array').and.to.not.be.empty;",
									"    responseData.data.forEach(game => {",
									"        pm.expect(game.genre).to.be.an('array');",
									"    });",
									"});",
									"",
									"// Test to ensure the response has the required headers",
									"pm.test(\"Response must have the required headers\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/genre?genre=Action-Adventure",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"genre"
							],
							"query": [
								{
									"key": "genre",
									"value": "Action-Adventure"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Games by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the response schema for the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('success');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Genre response schema has correct data types\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.success).to.be.a('boolean');",
									"  pm.expect(responseData.message).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/genre/664bf9477bae56b3bc3708f8",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"genre",
								"664bf9477bae56b3bc3708f8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add game",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - success and message\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('success');",
									"  pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"genre\":{\n    \"title\":\"Kingdom Hearts\",\n    \"release\":\"March 28th, 2002\",\n    \"genre\": \"Role-Playing Game\",\n    \"rating\":\"E 10 and Up\",\n    \"developer\":\"66534f619e50de2dd134f084\"\n}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/genre",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"genre"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to ensure the response has the Content-Type header set to application/json",
									"pm.test(\"Response has Content-Type header set to application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test to ensure data integrity by checking non-empty values in the 'data' object",
									"pm.test(\"Data integrity - Check non-empty values in 'data' object\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"",
									"    console.log(\"Response Data:\", responseData.data);",
									"",
									"    const data = responseData.data;",
									"    const propertiesToCheck = ['_id', 'title', 'release', 'genre', 'rating', 'developer', 'createdAt', 'updatedAt', '__v'];",
									"",
									"    propertiesToCheck.forEach(property => {",
									"        console.log(`${property}:`, data[property]);",
									"        pm.expect(data[property], `${property} should not be empty`).to.exist.and.to.not.be.empty;",
									"    });",
									"});",
									"",
									"// Test to ensure the response time is less than 1000ms",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Legend of Final Crisis\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/genre/664bf4ba7bae56b3bc3708dd",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"genre",
								"664bf4ba7bae56b3bc3708dd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to ensure the response status code is 404 (Not Found)",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response).to.have.status(404);",
									"});",
									"",
									"// Test to ensure the response time is less than 300ms",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"// Test to ensure the response body contains an error message",
									"pm.test(\"Response body contains an error message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.message).to.include(\"not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/v1/genre/664c110e878581351c9cd67c",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"genre",
								"664c110e878581351c9cd67c"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}